#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
processing_tools_array
"""
import os
from datetime import datetime
import numpy as np
from obspy import read, Inventory, Stream, read_inventory, UTCDateTime
from obspy.core import AttribDict
from obspy.core.inventory import Station, Network
import matplotlib.pyplot as plt
from scipy.linalg import eigh
from scipy.signal import hilbert
from matplotlib.colors import Normalize

class ArrayTools:

    def __init__(self, path_files, path_metadata):
        self.inv = None # Inventario de metadatos 
        self.st = None  # Flujo de datos sísmicos
        self.path_files = path_files  # Ruta a los archivos de datos sísmicos
        self.path_metadata = path_metadata # Ruta a los archivos de metadatos

    def __get_inventory(self):  
        self.inv = read_inventory(self.path_metadata)

    def __read_files(self, starttime, endtime):
        date_format = "%Y-%m-%d %H:%M:%S"
        if starttime is not None and endtime is not None:
            start = datetime.strptime(starttime, date_format)
            start = UTCDateTime(start)
            end = datetime.strptime(endtime, date_format)
            end = UTCDateTime(end)

        traces = []
        for root, dirs, files in os.walk(self.path_files):
            # Nombre de los archivos: NET.STA.LOC.CHAN.DYYYY.DDD
            #print("-1-")
            #print(root)
            #print(files)
            #print("-2-")
            for file in files:
                #print(file)
                try:
                    #print(len(read(os.path.join(root, file))))
                    tr = read(os.path.join(root, file))[0]  #[0] extrae el primer "Trace" de ese Stream, que representa una señal individual (comp. de una estación, por ejemplo).
                    if starttime is not None and endtime is not None:
                       tr.trim(start, end)
                       #print("++")
                    traces.append(tr)  #Añade la traza (tr) a una lista llamada traces, que acumula todas las señales válidas para trabajar con ellas después.
                except:
                    print("file:", file, "Not valid")

        for tr in traces:
            print(f"Tasa de muestreo de {tr.id}: {tr.stats.sampling_rate} Hz")
        
        self.st = Stream(traces)

    def __filter_inventory_by_stream(self, stream: Stream, inventory: Inventory) -> Inventory:
        # Create an empty list to hold filtered networks
        filtered_networks = []

        # Loop through networks in the inventory
        for network in inventory:
            # Create a list to hold filtered stations for each network
            filtered_stations = []

            # Loop through stations in the network
            for station in network:
                # Find channels in this station that match the stream traces
                filtered_channels = []

                # Check if any trace in the stream matches the station and network
                for trace in stream:
                    # Extract network, station, location, and channel codes from trace
                    trace_net, trace_sta, trace_loc, trace_chan = trace.id.split(".")

                    # Check if the current station and network match the trace
                    if station.code == trace_sta and network.code == trace_net:
                        # Look for a channel in the station that matches the trace's channel code
                        for channel in station.channels:
                            if channel.code == trace_chan and (not trace_loc or channel.location_code == trace_loc):
                                filtered_channels.append(channel)

                # If there are any matching channels, create a filtered station
                if filtered_channels:
                    filtered_station = Station(
                        code=station.code,
                        latitude=station.latitude,
                        longitude=station.longitude,
                        elevation=station.elevation,
                        creation_date=station.creation_date,
                        site=station.site,
                        channels=filtered_channels
                    )
                    filtered_stations.append(filtered_station)

            # If there are any matching stations, create a filtered network
            if filtered_stations:
                filtered_network = Network(
                    code=network.code,
                    stations=filtered_stations
                )
                filtered_networks.append(filtered_network)

        # Create a new inventory with the filtered networks
        filtered_inventory = Inventory(networks=filtered_networks, source=inventory.source)
        return filtered_inventory
        
    def __extract_coordinates(self):
        n = len(self.st)
        print(f"valor de n:{n}")
        self.coords = {} # Diccionario vacío donde se almacenarán las coordenadas de cada traza, que es una traza de una estación
        for i in range(n):
            #coords = self.inv.get_coordinates(self.st[i].id)
            #se usa starttime para evitar ambigüedades si hay varios registro históricos, y el warning 
            #print("-a-")
            #print(self.inv)
            #print("-b-")
            #print(self.st[i].id)
            #print("-c-")
            coords = self.inv.get_coordinates(self.st[i].id, self.st[i].stats.starttime)
            #print(coords)
            #print("-d-")
            self.st[i].stats.coordinates = AttribDict(
                {'latitude': coords['latitude'], 'elevation': coords['elevation'], 'longitude': coords['longitude']})
            #print("coordinates:", self.st[0].stats.coordinates.latitude,  self.st[0].stats.coordinates.longitude)
            print("coordinates:", self.st[i].stats.coordinates.latitude,  self.st[i].stats.coordinates.longitude)

            #self.coords[self.st[i].id] = [self.st[0].stats.coordinates.latitude,  self.st[0].stats.coordinates.longitude]
            self.coords[self.st[i].id] = [
                self.st[i].stats.coordinates.latitude,
                self.st[i].stats.coordinates.longitude
            ]
        print(self.coords)

    def __convert_to_array(self):
        # fila: traza sísmica
        # columna: valor de la señal en el tiempo
        # Lo siguiente asume que todas las trazas tienen la misma longitud, lo cual es común si se ha hecho un trim() antes
        self.data_array = np.zeros((len(self.st), len(self.st[0].data))) 
        self.index_list = []
        for i, tr in enumerate(self.st):
            #self.index_list.append(self.st[i].id)
            #self.data_array[i,:] = self.st[i].data
            self.index_list.append(tr.id)
            self.data_array[i,:] = tr.data            
        print("end __convert_to_array")

    def get_traces(self, starttime=None, endtime=None):
        self.__get_inventory()
        self.__read_files(starttime, endtime)
        self.__extract_coordinates()
        self.__convert_to_array()
        
        """
        plots
        """
        # === 1. Subplots para cada traza ===
        num_traces = len(self.st)
        fig, axs = plt.subplots(num_traces, 1, figsize=(10, 2 * num_traces), sharex=True)
        #fig, axs = plt.subplots(num_traces, 1, figsize=(14, 2 * num_traces), sharex=True)

        for i, tr in enumerate(self.st):
            t = np.linspace(0, tr.stats.npts / tr.stats.sampling_rate, tr.stats.npts)
            axs[i].plot(t, tr.data)
            #axs[i].set_ylabel(tr.id, fontsize=8)
            station_code = tr.id.split(".")[1]  # Extrae solo STA
            axs[i].set_ylabel(station_code, fontsize=9, rotation=0, labelpad=40)
            axs[i].grid(True)

        axs[-1].set_xlabel("Tiempo (s)")
        plt.suptitle("Trazas sísmicas", fontsize=12)
        plt.tight_layout(rect=[0, 0, 1, 0.96])
        plt.show()
        # === 2. Mapa de ubicaciones ===
        plt.figure(figsize=(7, 7))
        for trace_id, (lat, lon) in self.coords.items():
            #plt.plot(lon, lat, 'o', label=trace_id, markersize=6)  
            plt.plot(lon, lat, 'o', markersize=6)  # punto negro
            plt.text(lon + 0.001, lat + 0.001, trace_id, fontsize=9, ha='left', va='bottom')
        plt.xlabel("Longitud")
        plt.ylabel("Latitud")
        plt.title("Ubicación de las estaciones")
        plt.grid(True)
        #plt.legend(fontsize="small", loc="best")        
        plt.tight_layout()
        plt.show()

        
        print("end get_traces")

    def run_music(self):
        """
        i = 0
        for index, tr in zip(self.index_list, self.st):
            coords = self.coords[index]
            # also coords = tr.stats.coordinates.latitude
            data_trace = self.data_array[i,:]
            # also data_trace = tr.data
            i = i+1
        print("done run_music")
        """
        data = self.data_array
        num_sensors, num_samples = data.shape

        # === 1. Convertir coordenadas geográficas a un plano (X, Y) relativo ===
        ref_lat, ref_lon = list(self.coords.values())[0]  # estación de referencia
        sensor_positions = []

        for tr_id in self.index_list:
            lat, lon = self.coords[tr_id]
            x = (lon - ref_lon) * 111320 * np.cos(np.radians(ref_lat))  # metros aprox.
            y = (lat - ref_lat) * 110540
            sensor_positions.append([x, y])

        sensor_positions = np.array(sensor_positions)

        # === 2. Parámetros de señal ===
        fs = self.st[0].stats.sampling_rate
        f_signal = 20  # Hz, puedes ajustar esto si conoces la frecuencia dominante
        print("*****")
        print(f_signal)
        print(fs)
        print("*****")
        analytic_data = hilbert(data)  # señal compleja
        R = np.cov(analytic_data)

        # === 3. Descomposición espectral ===
        eigvals, eigvecs = eigh(R)
        idx = eigvals.argsort()[::-1]
        eigvals = eigvals[idx]
        eigvecs = eigvecs[:, idx]

        # === 4. Estimar número de fuentes (MDL) ===
        n = len(eigvals)
        mdl = np.zeros(n-1)
        for k in range(n-1):
            mdl[k] = -np.prod(eigvals[k+1:]**(1/(n-k-1))) * (n-k-1) + 0.5*k*(2*n-k)*np.log(num_samples)
        num_sources = np.argmin(mdl) + 1
        print(f"Número estimado de fuentes: {num_sources}")

        # === 5. Subespacio de ruido ===
        En = eigvecs[:, num_sources:]

        # === 6. MUSIC scanning ===
        #Valores originales
        azimuths = np.linspace(0, 360, 720) # 0.5° de resolución (mayor precisión que usar np.linspace(0, 360, 360)
        slowness_range = np.linspace(1/5000, 1/800, 200)
        
        #slowness_range = np.linspace(1/6000, 1/300, 200)  # 300–6000 m/s. slowness_range=1/6000 a 1/300: Captura tanto ondas P (alta velocidad) como S (baja velocidad).
        
        


        
        music_map = np.zeros((len(slowness_range), len(azimuths)))

        for i, s in enumerate(slowness_range):
            for j, az in enumerate(azimuths):
                theta = np.deg2rad(az)
                direction = np.array([np.cos(theta), np.sin(theta)])
                steer = np.exp(-2j * np.pi * f_signal * (sensor_positions @ (s * direction)))
                steer = steer[:, np.newaxis]
                projection = steer.conj().T @ En @ En.conj().T @ steer
                music_map[i, j] = 1 / np.abs(projection)

        # === 7. Encontrar el pico ===
        peak_idx = np.unravel_index(np.argmax(music_map), music_map.shape)

        def quadratic_interpolation(y1, y2, y3):
            return 0.5*(y1 - y3)/(y1 - 2*y2 + y3)

        j = peak_idx[1]
        az_peak = azimuths[j]
        if 0 < j < len(azimuths)-1:
            delta = quadratic_interpolation(music_map[peak_idx[0], j-1],
                                            music_map[peak_idx[0], j],
                                            music_map[peak_idx[0], j+1])
            az_peak += delta * (azimuths[1]-azimuths[0])

        i = peak_idx[0]
        s_peak = slowness_range[i]
        if 0 < i < len(slowness_range)-1:
            delta = quadratic_interpolation(music_map[i-1, peak_idx[1]],
                                            music_map[i, peak_idx[1]],
                                            music_map[i+1, peak_idx[1]])
            s_peak += delta * (slowness_range[1]-slowness_range[0])

        estimated_velocity = 1 / s_peak
        estimated_az = az_peak % 360

        # === 8. Gráficos ===

        # === 8.2. MUSIC spectrum ===
        plt.figure(figsize=(12, 6))
        im = plt.imshow(
            10 * np.log10(music_map),
            extent=[0, 360, 1 / slowness_range[-1], 1 / slowness_range[0]],
            aspect='auto',
            origin='lower',
            cmap='plasma'
        )
        plt.colorbar(label='Nivel (dB)')
        plt.title("MUSIC spectrum: dirección vs velocidad", fontsize=13)
        plt.xlabel("Azimuth (°)")
        plt.ylabel("Velocidad (m/s)")

        # Marcar máximo con símbolo visible
        plt.scatter(
            estimated_az, estimated_velocity,
            s=150, marker='o',
            facecolors='none',  # transparente por dentro
            edgecolors='red',   # contorno visible
            linewidths=2,
            label='Máximo estimado'
        )

        # Añadir texto con flecha
        plt.annotate(
            f"{estimated_az:.1f}°, {estimated_velocity:.0f} m/s",
            xy=(estimated_az, estimated_velocity),
            xytext=(estimated_az + 10, estimated_velocity + 100),
            arrowprops=dict(arrowstyle="->", color="white", lw=1),
            fontsize=10,
            color="white"
        )

        plt.legend(loc='upper right', fontsize=9, facecolor='white')
        plt.tight_layout()
        plt.show() 

        # === 8.4. Cortes del espectro MUSIC ===

        # Corte a velocidad estimada (fila)
        vel_idx = np.argmin(np.abs(1/slowness_range - estimated_velocity))
        az_profile = music_map[vel_idx, :]

        # Corte a azimut estimado (columna)
        az_idx = np.argmin(np.abs(azimuths - estimated_az))
        vel_profile = music_map[:, az_idx]

        # === Subgráficos separados ===
        # 1. Corte por velocidad (potencia vs azimut)
        fig, axs = plt.subplots(1, 2, figsize=(12, 4))

        # === 1. Corte por velocidad (azimut)
        axs[0].plot(azimuths, 10 * np.log10(az_profile), color='blue')
        axs[0].scatter(estimated_az, 10 * np.log10(az_profile[az_idx]), color='red', marker='x', s=80, label="Estimado")
        axs[0].text(estimated_az + 5, 10 * np.log10(az_profile[az_idx]),
                    f"{estimated_az:.1f}°", color='red', fontsize=10)
        axs[0].set_xlabel("Azimuth (°)")
        axs[0].set_ylabel("Nivel (dB)")
        axs[0].set_title("Dirección estimada")
        axs[0].legend()

        # === 2. Corte por azimut (velocidad)
        vel_axis = 1 / slowness_range
        axs[1].plot(vel_axis, 10 * np.log10(vel_profile), color='green')
        axs[1].scatter(estimated_velocity, 10 * np.log10(vel_profile[vel_idx]), color='red', marker='x', s=80, label="Estimado")
        axs[1].text(estimated_velocity + 30, 10 * np.log10(vel_profile[vel_idx]),
                    f"{estimated_velocity:.0f} m/s", color='red', fontsize=10)
        axs[1].set_xlabel("Velocidad (m/s)")
        axs[1].set_ylabel("Nivel (dB)")
        axs[1].set_title("Velocidad estimada")
        axs[1].legend()

        plt.tight_layout()
        plt.show()


        # 9. Resultado
        print(f"Dirección estimada (azimuth): {estimated_az:.2f}°")
        print(f"Velocidad estimada: {estimated_velocity:.2f} m/s")

if __name__ == "__main__":
    
    """
    path_files = "/Users/admin/Documents/iMacROA/MUSIC/data_cut"
    metadata_path = "/Users/admin/Documents/iMacROA/MUSIC/metadata/dataless.dlsv"
    """
    
    # Obtener la ruta del directorio donde está el script actual
    script_dir = os.path.dirname(os.path.abspath(__file__))
    path_files = os.path.join(script_dir,"data_cut")
    metadata_path = os.path.join(script_dir,"metadata/dataless.dlsv")
    
    AT = ArrayTools(path_files, metadata_path)
    #date_format = "%Y-%m-%d %H:%M:%S"  # "2023-12-11 14:30:00"
    start_date = "2017-09-03 03:39:04"
    end_date = "2017-09-03 03:39:08"
    AT.get_traces(starttime = start_date, endtime=end_date)
    AT.run_music()
